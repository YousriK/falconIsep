package com.falcon.avisep.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.falcon.avisep.domain.UserAvis;

import com.falcon.avisep.repository.UserAvisRepository;
import com.falcon.avisep.web.rest.util.HeaderUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing UserAvis.
 */
@RestController
@RequestMapping("/api")
public class UserAvisResource {

    private final Logger log = LoggerFactory.getLogger(UserAvisResource.class);

    private static final String ENTITY_NAME = "userAvis";
        
    private final UserAvisRepository userAvisRepository;

    public UserAvisResource(UserAvisRepository userAvisRepository) {
        this.userAvisRepository = userAvisRepository;
    }

    /**
     * POST  /user-avis : Create a new userAvis.
     *
     * @param userAvis the userAvis to create
     * @return the ResponseEntity with status 201 (Created) and with body the new userAvis, or with status 400 (Bad Request) if the userAvis has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/user-avis")
    @Timed
    public ResponseEntity<UserAvis> createUserAvis(@Valid @RequestBody UserAvis userAvis) throws URISyntaxException {
        log.debug("REST request to save UserAvis : {}", userAvis);
        if (userAvis.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new userAvis cannot already have an ID")).body(null);
        }
        UserAvis result = userAvisRepository.save(userAvis);
        return ResponseEntity.created(new URI("/api/user-avis/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /user-avis : Updates an existing userAvis.
     *
     * @param userAvis the userAvis to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated userAvis,
     * or with status 400 (Bad Request) if the userAvis is not valid,
     * or with status 500 (Internal Server Error) if the userAvis couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/user-avis")
    @Timed
    public ResponseEntity<UserAvis> updateUserAvis(@Valid @RequestBody UserAvis userAvis) throws URISyntaxException {
        log.debug("REST request to update UserAvis : {}", userAvis);
        if (userAvis.getId() == null) {
            return createUserAvis(userAvis);
        }
        UserAvis result = userAvisRepository.save(userAvis);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, userAvis.getId().toString()))
            .body(result);
    }

    /**
     * GET  /user-avis : get all the userAvis.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of userAvis in body
     */
    @GetMapping("/user-avis")
    @Timed
    public List<UserAvis> getAllUserAvis() {
        log.debug("REST request to get all UserAvis");
        List<UserAvis> userAvis = userAvisRepository.findAllWithEagerRelationships();
        return userAvis;
    }

    /**
     * GET  /user-avis/:id : get the "id" userAvis.
     *
     * @param id the id of the userAvis to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the userAvis, or with status 404 (Not Found)
     */
    @GetMapping("/user-avis/{id}")
    @Timed
    public ResponseEntity<UserAvis> getUserAvis(@PathVariable Long id) {
        log.debug("REST request to get UserAvis : {}", id);
        UserAvis userAvis = userAvisRepository.findOneWithEagerRelationships(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(userAvis));
    }

    /**
     * DELETE  /user-avis/:id : delete the "id" userAvis.
     *
     * @param id the id of the userAvis to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/user-avis/{id}")
    @Timed
    public ResponseEntity<Void> deleteUserAvis(@PathVariable Long id) {
        log.debug("REST request to delete UserAvis : {}", id);
        userAvisRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
