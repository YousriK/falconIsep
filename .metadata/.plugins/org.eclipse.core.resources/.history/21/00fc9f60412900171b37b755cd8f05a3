package com.falcon.avisep.controllers;


import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.falcon.avisep.model.Template;
import com.falcon.avisep.repository.TemplateRepository;
import com.falcon.avisep.util.HeaderUtil;

/**
 * REST controller for managing Template.
 */
@RestController
@RequestMapping("/api")
public class TemplateResource {

    private final Logger log = LoggerFactory.getLogger(TemplateResource.class);

    private static final String ENTITY_NAME = "template";
        
    private final TemplateRepository templateRepository;

    public TemplateResource(TemplateRepository templateRepository) {
        this.templateRepository = templateRepository;
    }

    /**
     * POST  /templates : Create a new template.
     */
    @PostMapping("/templates")
    public ResponseEntity<Template> createTemplate(@Valid @RequestBody Template template) throws URISyntaxException {
        log.debug("REST request to save Template : {}", template);
        if (template.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new template cannot already have an ID")).body(null);
        }
        Template result = templateRepository.save(template);
        return ResponseEntity.created(new URI("/api/templates/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /templates : Updates an existing template.
     */
    @PutMapping("/templates")
    public ResponseEntity<Template> updateTemplate(@Valid @RequestBody Template template) throws URISyntaxException {
        log.debug("REST request to update Template : {}", template);
        if (template.getId() == null) {
            return createTemplate(template);
        }
        Template result = templateRepository.save(template);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, template.getId().toString()))
            .body(result);
    }

    /**
     * GET  /templates : get all the templates.
     */
    @GetMapping("/templates")
    public List<Template> getAllTemplates() {
        log.debug("REST request to get all Templates");
        List<Template> templates = templateRepository.findAllWithEagerRelationships();
        return templates;
    }

    /**
     * GET  /templates/:id : get the "id" template.
     */
//    @GetMapping("/templates/{id}")
//    public ResponseEntity<Template> getTemplate(@PathVariable Long id) {
//        log.debug("REST request to get Template : {}", id);
//        Template template = templateRepository.findOneWithEagerRelationships(id);
//        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(template));
//    }

    /**
     * DELETE  /templates/:id : delete the "id" template.
     */
    @DeleteMapping("/templates/{id}")
    public ResponseEntity<Void> deleteTemplate(@PathVariable Long id) {
        log.debug("REST request to delete Template : {}", id);
        templateRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
