package com.falcon.avisep.controllers;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.falcon.avisep.model.ETeacher;
import com.falcon.avisep.repository.ETeacherRepository;
import com.falcon.avisep.util.HeaderUtil;

/**
 * REST controller for managing ETeacher.
 */
@RestController
@RequestMapping("/api")
public class ETeacherResource {

    private final Logger log = LoggerFactory.getLogger(ETeacherResource.class);

    private static final String ENTITY_NAME = "eTeacher";
        
    private final ETeacherRepository eTeacherRepository;

    public ETeacherResource(ETeacherRepository eTeacherRepository) {
        this.eTeacherRepository = eTeacherRepository;
    }

    /**
     * POST  /e-teachers : Create a new eTeacher.
     */
    @PostMapping("/e-teachers")
    public ResponseEntity<ETeacher> createETeacher(@Valid @RequestBody ETeacher eTeacher) throws URISyntaxException {
        log.debug("REST request to save ETeacher : {}", eTeacher);
        if (eTeacher.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new eTeacher cannot already have an ID")).body(null);
        }
        ETeacher result = eTeacherRepository.save(eTeacher);
        return ResponseEntity.created(new URI("/api/e-teachers/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /e-teachers : Updates an existing eTeacher.
     */
    @PutMapping("/e-teachers")
    public ResponseEntity<ETeacher> updateETeacher(@Valid @RequestBody ETeacher eTeacher) throws URISyntaxException {
        log.debug("REST request to update ETeacher : {}", eTeacher);
        if (eTeacher.getId() == null) {
            return createETeacher(eTeacher);
        }
        ETeacher result = eTeacherRepository.save(eTeacher);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, eTeacher.getId().toString()))
            .body(result);
    }

    /**
     * GET  /e-teachers : get all the eTeachers.
     */
    @GetMapping("/e-teachers")
    public List<ETeacher> getAllETeachers() {
        log.debug("REST request to get all ETeachers");
        List<ETeacher> eTeachers = eTeacherRepository.findAll();
        return eTeachers;
    }

    /**
     * GET  /e-teachers/:id : get the "id" eTeacher.
     */
//    @GetMapping("/e-teachers/{id}")
//    public ResponseEntity<ETeacher> getETeacher(@PathVariable Long id) {
//        log.debug("REST request to get ETeacher : {}", id);
//        ETeacher eTeacher = eTeacherRepository.findOne(id);
//        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(eTeacher));
//    }

    /**
     * DELETE  /e-teachers/:id : delete the "id" eTeacher.
     *
     * @param id the id of the eTeacher to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/e-teachers/{id}")
    @Timed
    public ResponseEntity<Void> deleteETeacher(@PathVariable Long id) {
        log.debug("REST request to delete ETeacher : {}", id);
        eTeacherRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
