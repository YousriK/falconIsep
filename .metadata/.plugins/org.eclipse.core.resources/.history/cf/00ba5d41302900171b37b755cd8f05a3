package com.falcon.avisep.controllers;


import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.falcon.avisep.model.Cours;
import com.falcon.avisep.repository.CoursRepository;
import com.falcon.avisep.util.HeaderUtil;

/**
 * REST controller for managing Cours.
 */
@RestController
@RequestMapping("/api")
public class CoursResource {

    private final Logger log = LoggerFactory.getLogger(CoursResource.class);

    private static final String ENTITY_NAME = "cours";
        
    private final CoursRepository coursRepository;

    public CoursResource(CoursRepository coursRepository) {
        this.coursRepository = coursRepository;
    }

    /**
     * POST  /cours : Create a new cours.
     */
    @PostMapping("/cours")
    public ResponseEntity<Cours> createCours(@Valid @RequestBody Cours cours) throws URISyntaxException {
        log.debug("REST request to save Cours : {}", cours);
        if (cours.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new cours cannot already have an ID")).body(null);
        }
        Cours result = coursRepository.save(cours);
        return ResponseEntity.created(new URI("/api/cours/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /cours : Updates an existing cours.
     */
    @PutMapping("/cours")
    public ResponseEntity<Cours> updateCours(@Valid @RequestBody Cours cours) throws URISyntaxException {
        log.debug("REST request to update Cours : {}", cours);
        if (cours.getId() == null) {
            return createCours(cours);
        }
        Cours result = coursRepository.save(cours);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, cours.getId().toString()))
            .body(result);
    }

    /**
     * GET  /cours : get all the cours.
     */
    @GetMapping("/cours")
    public List<Cours> getAllCours() {
        log.debug("REST request to get all Cours");
        List<Cours> cours = coursRepository.findAll();
        return cours;
    }

    /**
     * GET  /cours/:id : get the "id" cours.
     */
//    @GetMapping("/cours/{id}")
//    public ResponseEntity<Cours> getCours(@PathVariable Long id) {
//        log.debug("REST request to get Cours : {}", id);
//        Cours cours = coursRepository.findOne(id);
//        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(cours));
//    }

    /**
     * DELETE  /cours/:id : delete the "id" cours.
     */
    @DeleteMapping("/cours/{id}")
    public ResponseEntity<Void> deleteCours(@PathVariable Long id) {
        log.debug("REST request to delete Cours : {}", id);
        coursRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
