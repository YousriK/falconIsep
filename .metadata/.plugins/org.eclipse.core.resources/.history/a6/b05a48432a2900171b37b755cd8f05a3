package com.falcon.avisep.controllers;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.falcon.avisep.model.AdminAvis;
import com.falcon.avisep.repository.AdminAvisRepository;

/**
 * REST controller for managing AdminAvis.
 */
@RestController
@RequestMapping("/api")
public class AdminAvisResource {

    private final Logger log = LoggerFactory.getLogger(AdminAvisResource.class);

    private static final String ENTITY_NAME = "adminAvis";
        
    private final AdminAvisRepository adminAvisRepository;

    public AdminAvisResource(AdminAvisRepository adminAvisRepository) {
        this.adminAvisRepository = adminAvisRepository;
    }
    @PostMapping("/admin-avis")
    public ResponseEntity<AdminAvis> createAdminAvis(@Valid @RequestBody AdminAvis adminAvis) throws URISyntaxException {
        log.debug("REST request to save AdminAvis : {}", adminAvis);
        if (adminAvis.getAdmin_id() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new adminAvis cannot already have an ID")).body(null);
        }
        AdminAvis result = adminAvisRepository.save(adminAvis);
        return ResponseEntity.created(new URI("/api/admin-avis/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }
    @PutMapping("/admin-avis")
    public ResponseEntity<AdminAvis> updateAdminAvis(@Valid @RequestBody AdminAvis adminAvis) throws URISyntaxException {
        log.debug("REST request to update AdminAvis : {}", adminAvis);
        if (adminAvis.getId() == null) {
            return createAdminAvis(adminAvis);
        }
        AdminAvis result = adminAvisRepository.save(adminAvis);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, adminAvis.getId().toString()))
            .body(result);
    }
    @GetMapping("/admin-avis")
    public List<AdminAvis> getAllAdminAvis() {
        log.debug("REST request to get all AdminAvis");
        List<AdminAvis> adminAvis = adminAvisRepository.findAll();
        return adminAvis;
    }
    @GetMapping("/admin-avis/{id}")
    public ResponseEntity<AdminAvis> getAdminAvis(@PathVariable Long id) {
        log.debug("REST request to get AdminAvis : {}", id);
        AdminAvis adminAvis = adminAvisRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(adminAvis));
    }
    @DeleteMapping("/admin-avis/{id}")
    public ResponseEntity<Void> deleteAdminAvis(@PathVariable Long id) {
        log.debug("REST request to delete AdminAvis : {}", id);
        adminAvisRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
