package com.falcon.avisep.service;


import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.falcon.avisep.model.UserAvis;
import com.falcon.avisep.repository.UserAvisRepository;
import com.falcon.avisep.util.HeaderUtil;

/**
 * REST controller for managing UserAvis.
 */
@RestController
@RequestMapping("/api")
public class UserAvisService {

    private final Logger log = LoggerFactory.getLogger(UserAvisResource.class);
    private static final String ENTITY_NAME = "userAvis";
        
    private final UserAvisRepository userAvisRepository;

    public UserAvisResource(UserAvisRepository userAvisRepository) {
        this.userAvisRepository = userAvisRepository;
    }

    /**
     * POST  /user-avis : Create a new userAvis.
     */
    @PostMapping("/user-avis")
    public ResponseEntity<UserAvis> createUserAvis(@Valid @RequestBody UserAvis userAvis) throws URISyntaxException {
        log.debug("REST request to save UserAvis : {}", userAvis);
        if (userAvis.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new userAvis cannot already have an ID")).body(null);
        }
        UserAvis result = userAvisRepository.save(userAvis);
        return ResponseEntity.created(new URI("/api/user-avis/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /user-avis : Updates an existing userAvis.
     */
    @PutMapping("/user-avis")
    public ResponseEntity<UserAvis> updateUserAvis(@Valid @RequestBody UserAvis userAvis) throws URISyntaxException {
        log.debug("REST request to update UserAvis : {}", userAvis);
        if (userAvis.getId() == null) {
            return createUserAvis(userAvis);
        }
        UserAvis result = userAvisRepository.save(userAvis);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, userAvis.getId().toString()))
            .body(result);
    }

    /**
     * GET  /user-avis : get all the userAvis.
     */
    @GetMapping("/user-avis")
    public List<UserAvis> getAllUserAvis() {
        log.debug("REST request to get all UserAvis");
        List<UserAvis> userAvis = userAvisRepository.findAllWithEagerRelationships();
        return userAvis;
    }

    /**
     * GET  /user-avis/:id : get the "id" userAvis.
     */
//    @GetMapping("/user-avis/{id}")
//    public ResponseEntity<UserAvis> getUserAvis(@PathVariable Long id) {
//        log.debug("REST request to get UserAvis : {}", id);
//        UserAvis userAvis = userAvisRepository.findOneWithEagerRelationships(id);
//        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(userAvis));
//    }

    /**
     * DELETE  /user-avis/:id : delete the "id" userAvis.
     */
    @DeleteMapping("/user-avis/{id}")
    public ResponseEntity<Void> deleteUserAvis(@PathVariable Long id) {
        log.debug("REST request to delete UserAvis : {}", id);
        userAvisRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
